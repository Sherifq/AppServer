FROM ubuntu:18.04

ARG RELEASE_DATE="2016-06-21"
ARG RELEASE_DATE_SIGN=""
ARG VERSION="8.9.0.190"
ARG SOURCE_REPO_URL="deb http://static.teamlab.com.s3.amazonaws.com/repo/debian squeeze main"
ARG DEBIAN_FRONTEND=noninteractive

LABEL onlyoffice.community.release-date="${RELEASE_DATE}" \
      onlyoffice.community.version="${VERSION}" \
      maintainer="Ascensio System SIA <support@onlyoffice.com>"

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

RUN apt-get -y update && \
    apt-get -yq install gnupg2 ca-certificates && \
    apt-get install -yq sudo locales && \
    addgroup --system --gid 107 onlyoffice && \
    adduser -uid 104 --quiet --home /var/www/onlyoffice --system --gid 107 onlyoffice && \
    locale-gen en_US.UTF-8 && \
    apt-get -y update && \
    apt-get install -yq software-properties-common wget curl cron rsyslog && \
    wget http://nginx.org/keys/nginx_signing.key && \
    apt-key add nginx_signing.key && \
    echo "deb http://nginx.org/packages/mainline/ubuntu/ bionic nginx" >> /etc/apt/sources.list.d/nginx.list && \
    echo "deb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx" >> /etc/apt/sources.list.d/nginx.list && \
    apt-get install -yq openjdk-8-jre-headless && \
    apt-get install -yq apt-transport-https && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \
    echo "deb https://download.mono-project.com/repo/ubuntu stable-bionic main" | tee /etc/apt/sources.list.d/mono-official.list && \
    apt-get -y update && \
    add-apt-repository -y ppa:certbot/certbot && \
    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - && \
    apt-get install -y nodejs && \
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - && \
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list && \
    wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && \
    dpkg -i packages-microsoft-prod.deb && \
    apt-get -y update && \
    apt-get install -yq nginx && \
    cd ~ && \
    echo "#!/bin/sh\nexit 0" > /usr/sbin/policy-rc.d && \
    apt-get install -yq libgdiplus \
                        python-certbot-nginx \
                        htop \
                        nano \
                        vim \
                        dnsutils \
                        python3-pip \
                        multiarch-support \
                        iproute2 \
                        ffmpeg \
                        jq \
                        git \
                        yarn \
                        dotnet-sdk-3.1 \
                        supervisor \
                        mysql-client

RUN git clone --single-branch --branch docker4serv https://github.com/Sherifq/AppServer.git /app/onlyoffice/src/

RUN cd /app/onlyoffice/src/ && \
    yarn install --cwd web/ASC.Web.Components --frozen-lockfile > build/ASC.Web.Components.log && \
    npm run build --prefix web/ASC.Web.Components && \
    yarn pack --cwd web/ASC.Web.Components

RUN cd /app/onlyoffice/src/ && \
    component=$(ls web/ASC.Web.Components/asc-web-components-v1.*.tgz) && \
	yarn remove asc-web-components --cwd web/ASC.Web.Common --peer && \
    yarn add file:../../$component --cwd web/ASC.Web.Common --cache-folder ../../yarn --peer && \
    yarn install --cwd web/ASC.Web.Common --frozen-lockfile > build/ASC.Web.Common.log && \
    npm run build --prefix web/ASC.Web.Common && \
    yarn pack --cwd web/ASC.Web.Common

RUN cd /app/onlyoffice/src/ && \
    npm run build:storybook --prefix web/ASC.Web.Components && \
    mkdir -p /var/www/story/ && \
    cp -Rf web/ASC.Web.Components/storybook-static/* /var/www/story/

RUN cd /app/onlyoffice/src/ && \
    component=$(ls web/ASC.Web.Components/asc-web-components-v1.*.tgz) && \
	common=$(ls web/ASC.Web.Common/asc-web-common-v1.*.tgz) && \
	yarn remove asc-web-components asc-web-common --cwd web/ASC.Web.Client && \
    yarn add ../../$component --cwd web/ASC.Web.Client --cache-folder ../../yarn && \
	yarn add ../../$common --cwd web/ASC.Web.Client --cache-folder ../../yarn && \
    yarn install --cwd web/ASC.Web.Client --frozen-lockfile || (cd web/ASC.Web.Client && npm i && cd ../../) && \
    npm run build --prefix web/ASC.Web.Client && \
    rm -rf /var/www/studio/client/* && \
    mkdir -p /var/www/studio/client && \
    cp -rf web/ASC.Web.Client/build/* /var/www/studio/client

RUN cd /app/onlyoffice/src/ && \
    component=$(ls  web/ASC.Web.Components/asc-web-components-v1.*.tgz) && \
	common=$(ls web/ASC.Web.Common/asc-web-common-v1.*.tgz) && \
	yarn remove asc-web-components asc-web-common --cwd products/ASC.People/Client && \
    yarn add ../../../$component --cwd products/ASC.People/Client --cache-folder ../../../yarn && \
	yarn add ../../../$common --cwd products/ASC.People/Client --cache-folder ../../../yarn && \
    yarn install --cwd products/ASC.People/Client --frozen-lockfile || (cd products/ASC.People/Client && npm i && cd ../../../) && \
    npm run build --prefix products/ASC.People/Client && \
    mkdir -p /var/www/products/ASC.People/client && \
    cp -Rf products/ASC.People/Client/build/* /var/www/products/ASC.People/client && \
    mkdir -p /var/www/products/ASC.People/client/products/people

RUN cd /app/onlyoffice/src/ && \
    rm -f /etc/nginx/conf.d/* && \
    cp -rf config/nginx/onlyoffice*.conf /etc/nginx/conf.d/ && \
    cp -rf config/nginx/includes /etc/nginx/ && \
    mkdir -p /app/onlyoffice/config/ && cp -rf config/* /app/onlyoffice/config/ && \
    sed -e 's/#//' -i /etc/nginx/conf.d/onlyoffice.conf && \
    cd products/ASC.People/Server && \
    dotnet -d publish -o /var/www/products/ASC.People/server && \
    cd ../../../ && \
    cd web/ASC.Web.Api && \
    dotnet -d publish -o /var/www/studio/api && \
    cd ../../ && \
    cd web/ASC.Web.Studio && \
    dotnet -d publish -o /var/www/studio/server && \
    cd ../../ && \
    cd common/services/ASC.Notify && \
    dotnet -d publish -o /var/www/services/notify && \
    cd ../../../ && \
    cd common/services/ASC.Studio.Notify && \
    dotnet -d publish -o /var/www/services/studio.notify

COPY config/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

COPY ./docker-entrypoint.sh /

RUN chmod +x /docker-entrypoint.sh

RUN rm -rf /var/lib/apt/lists/*

EXPOSE 80 443 8092 8081

ENTRYPOINT ["/docker-entrypoint.sh"]
