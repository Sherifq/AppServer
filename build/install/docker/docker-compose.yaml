version: '3'

services:

  zookeeper:
    image: zookeeper:3.4.9    # https://hub.docker.com/_/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
    - "2181:2181"
    networks:
    - onlyoffice
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVER: server.1=zookeeper:2888:3888
    volumes:
    - zoo_data:/data
    - zoo_log:/datalog

  kafka:
    image: confluentinc/cp-kafka:5.3.1   # https://hub.docker.com/r/confluentinc/cp-kafka/
    container_name: kafka
    hostname: kafka
    depends_on:
    - zookeeper
    ports:
    - "9092:9092"
    networks:
    - onlyoffice
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
    - kafka_data:/var/lib/kafka/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.0    # https://hub.docker.com/_/elasticsearch
    container_name: elasticsearch
    hostname: elasticsearch
    networks:
    - onlyoffice
    environment:
    - discovery.type=single-node
    - bootstrap.memory_lock=true
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m -Xss1m"
        #    sysctls:
        #      - vm.max_map_count=262144
        #      - vm.swappiness=1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65535
        hard: 65535
    volumes:
    - es_data:/usr/share/elasticsearch/data
    ports:
    - 9200:9200

  mysql:
    image: mysql:8.0.18       # https://hub.docker.com/_/mysql
    container_name: mysql
    hostname: mysql
    restart: always
    expose:
    - "3306"
    networks:
    - onlyoffice
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
    - ./config/mysql/conf.d:/etc/mysql/conf.d
    - ../../../sql:/docker-entrypoint-initdb.d
    - mysql_data:/var/lib/mysql
    - mysql_log:/var/log/mysql

  nginx:
    image: nginx:stable
    container_name: nginx
    hostname: nginx
    restart: always
    expose:
    - "80"
    #- "443"
    networks:
    - onlyoffice
      #108     cp -rf config/nginx/onlyoffice*.conf /etc/nginx/conf.d/ && \
      #109     cp -rf config/nginx/includes /etc/nginx/ &&
    volumes:
        # so-so solution
    - frontnginx/onlyoffice.conf:/etc/nginx/conf.d/onlyoffice.conf
    - nginx_log:/var/log/nginx


      #  appserver:
      #    image: monoappserver
      #    container_name: monoappserver
      #    hostname: monoappserver
      #    restart: always
      #    depends_on:
      #    - zookeeper
      #    - kafka
      #    - mysql
      #    - elasticsearch
      #    ports:
      #    - 8092:8092
      #    networks:
      #    - onlyoffice
      #    environment:
      #      MYSQL_HOST: mysql
      #      MYSQL_DATABASE: ${MYSQL_DATABASE}
      #      MYSQL_USER: ${MYSQL_USER}
      #      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      #      MYSQL_DATABASE: ${MYSQL_DATABASE}
      #      KAFKA_HOST: kafka
      #      ZOO_HOST: zookeeper
      #      ES_HOST: elasticsearch
      #    volumes:
      #    - app_data:/app/onlyoffice/data/

networks:
  onlyoffice:
    driver: 'bridge'

volumes:
  mysql_data:
  mysql_log:
  nginx_log:
  es_data:
  zoo_data:
  zoo_log:
  kafka_data:
  app_data:

